{
  "components" : {
    "parameters" : {
      "FieldList" : {
        "in" : "query",
        "name" : "field_list",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/FieldList"
        }
      },
      "Filter" : {
        "description" : "The result can be filtered by the marked fields in the Fields section below.<br /><br />Single filter: `&filter=field:value`<br />Multiple filters: `&filter=field:value,field:value`<br />Date filters: `&filter=field:start value|end value` (using datetime format)",
        "in" : "query",
        "name" : "filter",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/Filter"
        }
      },
      "Format" : {
        "description" : "The data format of the response.",
        "in" : "query",
        "name" : "format",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/Format"
        }
      },
      "Game" : {
        "description" : "Filter by the ID field on the game resource.",
        "in" : "query",
        "name" : "game",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/GameId"
        }
      },
      "Limit" : {
        "description" : "The number of results to display per page. This value defaults to 100 and can not exceed this number.",
        "in" : "query",
        "name" : "limit",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/Limit"
        }
      },
      "Offset" : {
        "description" : "Return results starting with the object at the offset specified.",
        "in" : "query",
        "name" : "offset",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/Offset"
        }
      },
      "Page" : {
        "description" : "Page number of search results.",
        "in" : "query",
        "name" : "page",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/Page"
        }
      },
      "Platforms" : {
        "description" : "Filters results by platform. The value passed to this filter should be the ID of the platform to filter results by.",
        "in" : "query",
        "name" : "platforms",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/PlatformId"
        }
      },
      "Query" : {
        "description" : "The search string.",
        "in" : "query",
        "name" : "query",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/Query"
        }
      },
      "Resources" : {
        "description" : "List of resources to filter results. This filter can accept multiple arguments, each delimited with a \",\".",
        "explode" : false,
        "in" : "query",
        "name" : "resources",
        "required" : false,
        "schema" : {
          "description" : "##ENTER##",
          "items" : {
            "$ref" : "#/components/schemas/ResourceType"
          },
          "type" : "array"
        },
        "style" : "form"
      },
      "Sort" : {
        "description" : "The result set can be sorted by the marked fields in the Fields section below. Format: &sort=field:direction where direction is either asc or desc.",
        "in" : "query",
        "name" : "sort",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/Sort"
        }
      },
      "SubscriberOnly" : {
        "description" : "##ENTER##",
        "in" : "query",
        "name" : "subscriber_only",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/SubscriberOnly"
        }
      },
      "TimeToSave" : {
        "description" : "The number of seconds into the video the current user is",
        "in" : "query",
        "name" : "time_to_save",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/TimeToSave"
        }
      },
      "VideoId" : {
        "description" : "Id of the video",
        "in" : "query",
        "name" : "video_id",
        "required" : false,
        "schema" : {
          "$ref" : "#/components/schemas/VideoId"
        }
      }
    },
    "responses" : {
      "InvalidAPIKey" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/InvalidAPIKey"
            }
          },
          "application/jsonp" : {
            "schema" : {
              "$ref" : "#/components/schemas/InvalidAPIKey"
            }
          },
          "application/xml" : {
            "schema" : {
              "$ref" : "#/components/schemas/InvalidAPIKey"
            }
          }
        },
        "description" : "##ENTER##"
      }
    },
    "schemas" : {
      "Accessory" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the accessory detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the accessory was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the accessory was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the accessory.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the accessory.",
            "type" : "string"
          },
          "guid" : {
            "description" : "For use in single item api call for accessory.",
            "type" : "string"
          },
          "id" : {
            "description" : "Unique ID of the accessory.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the accessory."
              }
            ]
          },
          "image_tags" : {
            "description" : "List of image tags to filter the images endpoint.",
            "items" : {
              "$ref" : "#/components/schemas/ImageTag"
            },
            "type" : "array"
          },
          "name" : {
            "description" : "Name of the accessory.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the accessory on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Character" : {
        "description" : "##ENTER##",
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Character.Sparse"
          },
          {
            "properties" : {
              "concepts" : {
                "description" : "Concepts related to the character.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "enemies" : {
                "description" : "Enemies of the character.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "franchises" : {
                "description" : "Franchises related to the character.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "friends" : {
                "description" : "Friends of the character.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "games" : {
                "description" : "Games the character has appeared in.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "locations" : {
                "description" : "Locations related to the character.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "objects" : {
                "description" : "Objects related to the character.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "people" : {
                "description" : "People who have worked with the character.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              }
            }
          }
        ]
      },
      "Character.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "aliases" : {
            "description" : "List of aliases the character is known by. A \\n (newline) separates each alias.",
            "type" : "string"
          },
          "api_detail_url" : {
            "description" : "URL pointing to the character detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "birthday" : {
            "description" : "Birthday of the character.",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the character was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the character was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the character.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the character.",
            "type" : "string"
          },
          "first_appeared_in_game" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "Game where the character made its first appearance."
              }
            ]
          },
          "gender" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Gender"
              },
              {
                "description" : "Gender of the character. `0` for other, `1` for male, `2` for female."
              }
            ]
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for character."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the character.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the character."
              }
            ]
          },
          "image_tags" : {
            "description" : "List of image tags to filter the images endpoint.",
            "items" : {
              "$ref" : "#/components/schemas/ImageTag"
            },
            "type" : "array"
          },
          "last_name" : {
            "description" : "Last name of the character.",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the character.",
            "type" : "string"
          },
          "real_name" : {
            "description" : "Real name of the character.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the character on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Chat" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the chat detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "channel_name" : {
            "description" : "Name of the video streaming channel associated with the chat.",
            "type" : "string"
          },
          "deck" : {
            "description" : "Brief summary of the chat.",
            "type" : "string"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for chat."
              }
            ]
          },
          "history" : {
            "description" : "##ENTER##",
            "items" : {
              "$ref" : "#/components/schemas/Video"
            },
            "type" : "array"
          },
          "id" : {
            "description" : "Unique ID of the chat.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the chat."
              }
            ]
          },
          "password" : {
            "description" : "chat password.",
            "format" : "password",
            "type" : "string"
          },
          "player" : {
            "description" : "##ENTER##",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the chat on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          },
          "title" : {
            "description" : "Title of the chat.",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Company" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Company.Sparse"
          },
          {
            "properties" : {
              "characters" : {
                "description" : "Characters related to the company.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation.Counted"
                },
                "type" : "array"
              },
              "concepts" : {
                "description" : "Concepts related to the company.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation.Counted"
                },
                "type" : "array"
              },
              "developed_games" : {
                "description" : "Games the company has developed.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "developer_releases" : {
                "description" : "Releases the company has developed.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "distributor_releases" : {
                "description" : "Releases the company has distributed.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "locations" : {
                "description" : "Locations related to the company.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation.Counted"
                },
                "type" : "array"
              },
              "objects" : {
                "description" : "Objects related to the company.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation.Counted"
                },
                "type" : "array"
              },
              "people" : {
                "description" : "People who have worked with the company.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation.Counted"
                },
                "type" : "array"
              },
              "published_games" : {
                "description" : "Games published by the company.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "publisher_releases" : {
                "description" : "Releases the company has published.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              }
            }
          }
        ]
      },
      "Company.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "abbreviation" : {
            "description" : "Abbreviation of the company.",
            "example" : "##WRONG TYPE##",
            "nullable" : true,
            "type" : "string"
          },
          "aliases" : {
            "description" : "List of aliases the company is known by. A \\n (newline) separates each alias.",
            "type" : "string"
          },
          "api_detail_url" : {
            "description" : "URL pointing to the company detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the company was added to Giant Bomb."
              }
            ]
          },
          "date_founded" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the company was founded."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the company was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the company.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the company.",
            "type" : "string"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for company."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the company.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the company."
              }
            ]
          },
          "image_tags" : {
            "description" : "List of image tags to filter the images endpoint.",
            "items" : {
              "$ref" : "#/components/schemas/ImageTag"
            },
            "type" : "array"
          },
          "location_address" : {
            "description" : "Street address of the company.",
            "type" : "string"
          },
          "location_city" : {
            "description" : "City the company resides in.",
            "type" : "string"
          },
          "location_country" : {
            "description" : "Country the company resides in.",
            "type" : "string"
          },
          "location_state" : {
            "description" : "State the company resides in.",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the company.",
            "type" : "string"
          },
          "phone" : {
            "description" : "Phone number of the company.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the company on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          },
          "website" : {
            "description" : "URL to the company website.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Concept" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Concept.Sparse"
          },
          {
            "properties" : {
              "characters" : {
                "description" : "Characters related to the concept.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "concepts" : {
                "description" : "Concepts related to the concept.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "franchises" : {
                "description" : "Franchises related to the concept.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "games" : {
                "description" : "Games the concept has appeared in.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "locations" : {
                "description" : "Locations related to the concept.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "objects" : {
                "description" : "Objects related to the concept.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "people" : {
                "description" : "People who have worked with the concept.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "related_concepts" : {
                "description" : "Other concepts related to the concept.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              }
            }
          }
        ]
      },
      "Concept.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "aliases" : {
            "description" : "List of aliases the concept is known by. A \\n (newline) separates each alias.",
            "type" : "string"
          },
          "api_detail_url" : {
            "description" : "URL pointing to the concept detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the concept was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the concept was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the concept.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the concept.",
            "type" : "string"
          },
          "first_appeared_in_franchise" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation"
              },
              {
                "description" : "Franchise where the concept made its first appearance."
              }
            ]
          },
          "first_appeared_in_game" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation"
              },
              {
                "description" : "Game where the concept made its first appearance."
              }
            ]
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for concept."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the concept.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the concept."
              }
            ]
          },
          "image_tags" : {
            "description" : "List of image tags to filter the images endpoint.",
            "items" : {
              "$ref" : "#/components/schemas/ImageTag"
            },
            "type" : "array"
          },
          "name" : {
            "description" : "Name of the concept.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the concept on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "CurrentLive" : {
        "description" : "##ENTER##",
        "properties" : {
          "success" : {
            "description" : "##ENTER##",
            "type" : "integer"
          },
          "video" : {
            "description" : "##ENTER##",
            "nullable" : true,
            "properties" : {
              "image" : {
                "description" : "Thumbnail image of the video",
                "format" : "uri",
                "type" : "string"
              },
              "stream" : {
                "description" : "URL of the stream (HLS format)",
                "format" : "uri",
                "type" : "string"
              },
              "title" : {
                "description" : "Title of the live video",
                "type" : "string"
              }
            },
            "type" : "object"
          }
        },
        "type" : "object"
      },
      "DateTime" : {
        "description" : "##ENTER##",
        "pattern" : "\\d{4}-\\d{2}-\\d{2}(( \\d{2}:\\d{2}:\\d{2})|-\\d{2}-\\d{2}-\\d{2})",
        "type" : "string"
      },
      "DLC" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the dlc detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the dlc was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the dlc was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the dlc.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the dlc.",
            "nullable" : true,
            "type" : "string"
          },
          "game" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "Game the dlc is for."
              }
            ]
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for dlc."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the dlc.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the dlc."
              }
            ]
          },
          "name" : {
            "description" : "Name of the dlc.",
            "type" : "string"
          },
          "platform" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "The dlc's platform."
              }
            ]
          },
          "release_date" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date of the dlc."
              }
            ]
          },
          "site_detail_url" : {
            "description" : "URL pointing to the dlc on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "FieldList" : {
        "description" : "##ENTER##",
        "type" : "array"
      },
      "Filter" : {
        "description" : "##ENTER##",
        "pattern" : "^((\\w+:(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$",
        "type" : "string"
      },
      "Format" : {
        "description" : "##ENTER##",
        "enum" : [
          "xml",
          "json",
          "jsonp"
        ],
        "type" : "string"
      },
      "Franchise" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Franchise.Sparse"
          },
          {
            "properties" : {
              "characters" : {
                "description" : "Characters related to the franchise.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "concepts" : {
                "description" : "Concepts related to the franchise.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "games" : {
                "description" : "Games the franchise has appeared in.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "locations" : {
                "description" : "Locations related to the franchise.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "objects" : {
                "description" : "Objects related to the franchise.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "people" : {
                "description" : "People who have worked with the franchise.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              }
            }
          }
        ]
      },
      "Franchise.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "aliases" : {
            "description" : "List of aliases the franchise is known by. A \\n (newline) separates each alias.",
            "nullable" : true,
            "type" : "string"
          },
          "api_detail_url" : {
            "description" : "URL pointing to the franchise detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the franchise was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the franchise was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the franchise.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the franchise.",
            "type" : "string"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for franchise."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the franchise.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the franchise."
              }
            ]
          },
          "image_tags" : {
            "description" : "List of image tags to filter the images endpoint.",
            "items" : {
              "$ref" : "#/components/schemas/ImageTag"
            },
            "type" : "array"
          },
          "name" : {
            "description" : "Name of the franchise.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the franchise on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Game" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Game.Sparse"
          },
          {
            "properties" : {
              "characters" : {
                "description" : "Characters related to the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "concepts" : {
                "description" : "Concepts related to the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "developers" : {
                "description" : "Companies who developed the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "dlcs" : {
                "description" : "Game DLCs",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "first_appearance_characters" : {
                "description" : "Characters that first appeared in the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "first_appearance_concepts" : {
                "description" : "Concepts that first appeared in the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "first_appearance_locations" : {
                "description" : "Locations that first appeared in the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "first_appearance_objects" : {
                "description" : "Objects that first appeared in the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "first_appearance_people" : {
                "description" : "People that were first credited in the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "franchises" : {
                "description" : "Franchises related to the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "genres" : {
                "description" : "Genres that encompass the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "images" : {
                "description" : "List of images associated to the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Image.Tagged.Game"
                },
                "type" : "array"
              },
              "killed_characters" : {
                "description" : "Characters killed in the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "nullable" : true,
                "type" : "array"
              },
              "locations" : {
                "description" : "Locations related to the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "objects" : {
                "description" : "Objects related to the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "people" : {
                "description" : "People who have worked with the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "publishers" : {
                "description" : "Companies who published the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "releases" : {
                "description" : "Releases of the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "reviews" : {
                "description" : "Staff reviews of the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "similar_games" : {
                "description" : "Other games similar to the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "themes" : {
                "description" : "Themes that encompass the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "videos" : {
                "description" : "Videos associated to the game.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              }
            }
          }
        ]
      },
      "Game.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "aliases" : {
            "description" : "List of aliases the game is known by. A \\n (newline) separates each alias.",
            "type" : "string"
          },
          "api_detail_url" : {
            "description" : "URL pointing to the game detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the game was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the game was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the game.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the game.",
            "type" : "string"
          },
          "expected_release_day" : {
            "description" : "Expected day of release. The month is represented numerically. Combine with 'expected_release_month', 'expected_release_year' and 'expected_release_quarter' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.",
            "nullable" : true,
            "type" : "integer"
          },
          "expected_release_month" : {
            "description" : "Expected month of release. The month is represented numerically. Combine with 'expected_release_day', 'expected_release_quarter' and 'expected_release_year' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.",
            "nullable" : true,
            "type" : "integer"
          },
          "expected_release_quarter" : {
            "description" : "Expected quarter of release. The quarter is represented numerically, where 1 = Q1, 2 = Q2, 3 = Q3, and 4 = Q4. Combine with 'expected_release_day', 'expected_release_day', 'expected_release_month' and 'expected_release_year' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.",
            "nullable" : true,
            "type" : "integer"
          },
          "expected_release_year" : {
            "description" : "Expected year of release. Combine with 'expected_release_day', 'expected_release_month' and 'expected_release_quarter' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'original_release_date' field is set.",
            "nullable" : true,
            "type" : "integer"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for game."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the game.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the game."
              }
            ]
          },
          "image_tags" : {
            "description" : "List of image tags to filter the images endpoint.",
            "items" : {
              "$ref" : "#/components/schemas/ImageTag"
            },
            "type" : "array"
          },
          "name" : {
            "description" : "Name of the game.",
            "type" : "string"
          },
          "number_of_user_reviews" : {
            "description" : "Number of user reviews of the game on Giant Bomb.",
            "type" : "integer"
          },
          "original_game_rating" : {
            "description" : "Rating of the first release of the game.",
            "items" : {
              "$ref" : "#/components/schemas/Relation.Sparse"
            },
            "type" : "array"
          },
          "original_release_date" : {
            "description" : "Date the game was first released.",
            "example" : "2022-02-15",
            "format" : "date",
            "type" : "string"
          },
          "platforms" : {
            "description" : "The platforms the game exists on.",
            "items" : {
              "$ref" : "#/components/schemas/Relation.Platform"
            },
            "type" : "array"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the game on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "GameId" : {
        "description" : "##ENTER##",
        "type" : "integer"
      },
      "GameRating" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the game_rating detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for game_rating."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the game_rating.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the game_rating.",
                "nullable" : true
              }
            ]
          },
          "name" : {
            "description" : "Name of the game_rating.",
            "type" : "string"
          },
          "rating_board" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "Rating board that issues this game_rating."
              }
            ]
          }
        },
        "type" : "object"
      },
      "Gender" : {
        "description" : "##ENTER## `0` for other, `1` for male, `2` for female.",
        "maximum" : 3,
        "minimum" : 0,
        "nullable" : true,
        "type" : "integer"
      },
      "Genre" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the genre detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the genre was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the genre was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the genre.",
            "nullable" : true,
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the genre.",
            "nullable" : true,
            "type" : "string"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for genre."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the genre.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the genre."
              }
            ]
          },
          "name" : {
            "description" : "Name of the genre.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the genre on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "GetAllSavedTime" : {
        "properties" : {
          "savedTimes" : {
            "description" : "##ENTER##",
            "items" : {
              "description" : "##ENTER##",
              "properties" : {
                "savedOn" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/DateTime"
                    },
                    {
                      "description" : "Time/date the progress was saved"
                    }
                  ]
                },
                "savedTime" : {
                  "description" : "Saved time for this video",
                  "type" : "string"
                },
                "videoId" : {
                  "description" : "Id of the video",
                  "type" : "integer"
                }
              },
              "type" : "object"
            },
            "type" : "array"
          },
          "success" : {
            "description" : "##ENTER##",
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "GetSavedTime" : {
        "description" : "##ENTER##",
        "properties" : {
          "savedTime" : {
            "description" : "Saved time of the video or -1 if no time is saved for this user",
            "type" : "string"
          },
          "success" : {
            "description" : "##ENTER##",
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "GUID" : {
        "description" : "##ENTER##",
        "pattern" : "\\d+-\\d+",
        "type" : "string"
      },
      "Image" : {
        "description" : "##ENTER##",
        "properties" : {
          "icon_url" : {
            "description" : "URL to the icon version of the image.",
            "format" : "uri",
            "type" : "string"
          },
          "medium_url" : {
            "description" : "URL to the medium size of the image.",
            "format" : "uri",
            "type" : "string"
          },
          "original_url" : {
            "description" : "URL to the original image.",
            "format" : "uri",
            "type" : "string"
          },
          "screen_large_url" : {
            "description" : "URL to the large screenshot version of the image.",
            "format" : "uri",
            "type" : "string"
          },
          "screen_url" : {
            "description" : "URL to the screenshot version of the image.",
            "format" : "uri",
            "type" : "string"
          },
          "small_url" : {
            "description" : "URL to the small version of the image.",
            "format" : "uri",
            "type" : "string"
          },
          "super_url" : {
            "description" : "URL to the super sized version of the image.",
            "format" : "uri",
            "type" : "string"
          },
          "thumb_url" : {
            "description" : "URL to the thumb-sized version of the image.",
            "format" : "uri",
            "type" : "string"
          },
          "tiny_url" : {
            "description" : "URL to the tiny version of the image.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Image.Tagged" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Image"
          },
          {
            "properties" : {
              "image_tags" : {
                "description" : "List of image tags to filter the images endpoint.",
                "type" : "string"
              }
            }
          }
        ]
      },
      "Image.Tagged.Game" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Image"
          },
          {
            "properties" : {
              "tags" : {
                "description" : "List of image tags to filter the images endpoint.",
                "type" : "string"
              }
            }
          }
        ]
      },
      "ImageTag" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url": {
            "type" : "string",
            "format" : "uri"
          },
          "name": {
            "type" : "string"
          },
          "total": {
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "InvalidAPIKey" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Response"
          },
          {
            "properties" : {
              "error" : {
                "enum" : [
                  "Invalid API Key"
                ]
              },
              "results" : {
                "enum" : [
                  [
                    
                  ]
                ]
              },
              "status_code" : {
                "enum" : [
                  100
                ]
              }
            }
          }
        ]
      },
      "Limit" : {
        "description" : "##ENTER##",
        "maximum" : 100,
        "minimum" : 0,
        "type" : "integer"
      },
      "Location" : {
        "description" : "##ENTER##",
        "properties" : {
          "aliases" : {
            "description" : "List of aliases the location is known by. A \\n (newline) separates each alias.",
            "example" : "##WRONG TYPE##",
            "nullable" : true,
            "type" : "string"
          },
          "api_detail_url" : {
            "description" : "URL pointing to the location detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the location was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the location was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the location.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the location.",
            "nullable" : true,
            "type" : "string"
          },
          "first_appeared_in_game" : {
            "description" : "Game where the location made its first appearance.",
            "items" : {
              "$ref" : "#/components/schemas/Relation"
            },
            "type" : "array"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for location."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the location.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the location."
              }
            ]
          },
          "image_tags" : {
            "description" : "List of image tags to filter the images endpoint.",
            "items" : {
              "$ref" : "#/components/schemas/ImageTag"
            },
            "type" : "array"
          },
          "name" : {
            "description" : "Name of the location.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the location on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Object" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Object.Sparse"
          },
          {
            "properties" : {
              "characters" : {
                "description" : "Characters related to the object.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "companies" : {
                "description" : "Companies related to the object.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "concepts" : {
                "description" : "Concepts related to the object.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "franchises" : {
                "description" : "Franchises related to the object.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "games" : {
                "description" : "Games the object has appeared in.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "locations" : {
                "description" : "Locations related to the object.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "people" : {
                "description" : "People who have worked with the object.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "similar" : {
                "description" : "Objects related to the object.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              }
            }
          }
        ]
      },
      "Object.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "aliases" : {
            "description" : "List of aliases the object is known by. A \\n (newline) separates each alias.",
            "example" : "##WRONG TYPE##",
            "type" : "string"
          },
          "api_detail_url" : {
            "description" : "URL pointing to the object detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the object was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the object was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the object.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the object.",
            "type" : "string"
          },
          "first_appeared_in_game" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "Game where the object made its first appearance."
              }
            ]
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for object."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the object.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the object."
              }
            ]
          },
          "image_tags" : {
            "description" : "List of image tags to filter the images endpoint.",
            "items" : {
              "$ref" : "#/components/schemas/ImageTag"
            },
            "type" : "array"
          },
          "name" : {
            "description" : "Name of the object.",
            "example" : "##WRONG TYPE##",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the object on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Offset" : {
        "description" : "##ENTER##",
        "type" : "integer"
      },
      "Page" : {
        "description" : "##ENTER##",
        "type" : "integer"
      },
      "Person" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Person.Sparse"
          },
          {
            "properties" : {
              "characters" : {
                "description" : "Characters related to the person.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "concepts" : {
                "description" : "Concepts related to the person.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "franchises" : {
                "description" : "Franchises related to the person.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "games" : {
                "description" : "Games the person has appeared in.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "locations" : {
                "description" : "Locations related to the person.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "objects" : {
                "description" : "Objects related to the person.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "people" : {
                "description" : "People who have worked with the person.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              }
            }
          }
        ]
      },
      "Person.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "aliases" : {
            "description" : "List of aliases the person is known by. A \\n (newline) separates each alias.",
            "nullable" : true,
            "type" : "string"
          },
          "api_detail_url" : {
            "description" : "URL pointing to the person detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "birth_date" : {
            "description" : "Date the person was born.",
            "format" : "date",
            "type" : "string"
          },
          "country" : {
            "description" : "Country the person resides in.",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the person was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the person was last updated on Giant Bomb."
              }
            ]
          },
          "death_date" : {
            "description" : "Date the person died.",
            "format" : "date",
            "type" : "string"
          },
          "deck" : {
            "description" : "Brief summary of the person.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the person.",
            "type" : "string"
          },
          "first_credited_game" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "Game the person was first credited."
              }
            ]
          },
          "gender" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Gender"
              },
              {
                "description" : "Gender of the person. `0` for other, `1` for male, `2` for female."
              }
            ]
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for person."
              }
            ]
          },
          "hometown" : {
            "description" : "City or town the person resides in.",
            "type" : "string"
          },
          "id" : {
            "description" : "Unique ID of the person.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the person."
              }
            ]
          },
          "image_tags" : {
            "description" : "List of image tags to filter the images endpoint.",
            "items" : {
              "$ref" : "#/components/schemas/ImageTag"
            },
            "type" : "array"
          },
          "name" : {
            "description" : "Name of the person.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the person on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Platform" : {
        "description" : "##ENTER##",
        "properties" : {
          "abbreviation" : {
            "description" : "Abbreviation of the platform.",
            "type" : "string"
          },
          "api_detail_url" : {
            "description" : "URL pointing to the platform detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "company" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "Company that created the platform."
              }
            ]
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the platform was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the platform was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the platform.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the platform.",
            "type" : "string"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for platform."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the platform.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the platform."
              }
            ]
          },
          "image_tags" : {
            "description" : "List of image tags to filter the images endpoint.",
            "items" : {
              "$ref" : "#/components/schemas/ImageTag"
            },
            "type" : "array"
          },
          "install_base" : {
            "description" : "Approximate number of sold hardware units.",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the platform.",
            "type" : "string"
          },
          "online_support" : {
            "description" : "Flag indicating whether the platform has online capabilities.",
            "type" : "boolean"
          },
          "original_price" : {
            "description" : "Initial price point of the platform.",
            "type" : "string"
          },
          "release_date" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date of the platform."
              }
            ]
          },
          "site_detail_url" : {
            "description" : "URL pointing to the platform on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "PlatformId" : {
        "description" : "##ENTER##",
        "type" : "integer"
      },
      "Promo" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the promo detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the promo was added to Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the promo.",
            "type" : "string"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for promo."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the promo.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the promo."
              }
            ]
          },
          "link" : {
            "description" : "The link that promo points to.",
            "format" : "uri",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the promo.",
            "type" : "string"
          },
          "resource_type" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/ResourceType"
              },
              {
                "description" : "The type of resource the promo is pointing towards."
              }
            ]
          },
          "user" : {
            "description" : "Author of the promo.",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Query" : {
        "description" : "##ENTER##",
        "type" : "string"
      },
      "RatingBoard" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/RatingBoard.Sparse"
          },
          {
            "properties" : {
              "region" : {
                "description" : "Regions the rating_board is responsible for.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation.Sparse"
                },
                "type" : "array"
              }
            }
          }
        ]
      },
      "RatingBoard.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the rating_board detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the rating_board was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the rating_board was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the rating_board.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the rating_board.",
            "nullable" : true,
            "type" : "string"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for rating_board."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the rating_board.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the rating_board."
              }
            ]
          },
          "name" : {
            "description" : "Name of the rating_board.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the rating_board on Giant Bomb.",
            "format" : "uri",
            "nullable" : true,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Region" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Region.Sparse"
          },
          {
            "properties" : {
              "rating_boards" : {
                "description" : "Rating boards in the region.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation.Sparse"
                },
                "type" : "array"
              }
            }
          }
        ]
      },
      "Region.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the region detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the region was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the region was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the region.",
            "nullable" : true,
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the region.",
            "nullable" : true,
            "type" : "string"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for region."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the region.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the region."
              }
            ]
          },
          "name" : {
            "description" : "Name of the region.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the region on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Relation" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Relation.Sparse"
          },
          {
            "properties" : {
              "site_detail_url" : {
                "description" : "URL pointing to the location on Giant Bomb.",
                "format" : "uri",
                "type" : "string"
              }
            }
          }
        ]
      },
      "Relation.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the location detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "id" : {
            "description" : "Unique ID of the location.",
            "type" : "integer"
          },
          "name" : {
            "description" : "Name of the location.",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Relation.Counted" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Relation"
          },
          {
            "properties" : {
              "count" : {
                "description" : "##ENTER##",
                "type" : "string"
              }
            }
          }
        ]
      },
      "Relation.GUID" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Relation"
          },
          {
            "properties" : {
              "guid" : {
                "allOf" : [
                  {
                    "$ref" : "#/components/schemas/GUID"
                  },
                  {
                    "description" : "##ENTER##"
                  }
                ]
              }
            }
          }
        ]
      },
      "Relation.Platform" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Relation"
          },
          {
            "properties" : {
              "abbreviation" : {
                "description" : "##ENTER##",
                "type" : "string"
              }
            }
          }
        ]
      },
      "Release" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Release.Sparse"
          },
          {
            "properties" : {
              "developers" : {
                "description" : "Companies who developed the release.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              },
              "publishers" : {
                "description" : "Companies who published the release.",
                "items" : {
                  "$ref" : "#/components/schemas/Relation"
                },
                "type" : "array"
              }
            }
          }
        ]
      },
      "Release.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the release detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the release was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the release was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the release.",
            "nullable" : true,
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the release.",
            "nullable" : true,
            "type" : "string"
          },
          "expected_release_day" : {
            "description" : "\"Expected day of release. The day is represented numerically. Combine with 'expected_release_month', 'expected_release_year' and 'expected_release_quarter' for Giant Bomb's best guess release date of the release. These fields will be empty if the 'release_date' field is set.\"",
            "nullable" : true,
            "type" : "integer"
          },
          "expected_release_month" : {
            "description" : "\"Expected month of release. The month is represented numerically. Combine with 'expected_release_day', expected_release_quarter' and 'expected_release_year' for Giant Bomb's best guess release date of the release. These fields will be empty if the 'release_date' field is set.\"",
            "nullable" : true,
            "type" : "integer"
          },
          "expected_release_quarter" : {
            "description" : "Expected quarter of release. The quarter is represented numerically, where 1 = Q1, 2 = Q2, 3 = Q3, and 4 = Q4. Combine with 'expected_release_day', 'expected_release_month' and 'expected_release_year' for Giant Bomb's best guess release date of the release. These fields will be empty if the 'release_date' field is set.",
            "nullable" : true,
            "type" : "integer"
          },
          "expected_release_year" : {
            "description" : "Expected year of release. Combine with 'expected_release_day', 'expected_release_month' and 'expected_release_quarter' for Giant Bomb's best guess release date of the game. These fields will be empty if the 'release_date' field is set.",
            "nullable" : true,
            "type" : "integer"
          },
          "game" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "Game the release is for."
              }
            ]
          },
          "game_rating" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "Rating of the release."
              }
            ]
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for release."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the release.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the release."
              }
            ]
          },
          "maximum_players" : {
            "description" : "Maximum players",
            "type" : "integer"
          },
          "minimum_players" : {
            "description" : "Minimum players",
            "type" : "integer"
          },
          "multiPlayerFeatures" : {
            "description" : "Multiplayer features",
            "items" : {
              "properties" : {
                "multiPlayerFeature" : {
                  "description" : "##ENTER##",
                  "enum" : [
                    "Local co-op",
                    "LAN co-op",
                    "Online co-op",
                    "Local competitive",
                    "LAN competitive",
                    "Online competitive",
                    "Local splitscreen",
                    "Online splitscreen",
                    "Pass and play",
                    "Voice chat",
                    "Asynchronous multiplayer"
                  ],
                  "type" : "string"
                }
              }
            },
            "type" : "array"
          },
          "name" : {
            "description" : "Name of the release.",
            "type" : "string"
          },
          "platform" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "The release's platform."
              }
            ]
          },
          "product_code_type" : {
            "description" : "The type of product code the release has (ex. UPC/A, ISBN-10, EAN-13).",
            "nullable" : true,
            "type" : "array"
          },
          "product_code_value" : {
            "description" : "The release's product code.",
            "nullable" : true,
            "type" : "string"
          },
          "region" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "Region the release is responsible for."
              }
            ]
          },
          "release_date" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date of the release."
              }
            ]
          },
          "resolutions" : {
            "description" : "Resolutions available",
            "items" : {
              "$ref" : "#/components/schemas/Relation.Sparse"
            },
            "type" : "array"
          },
          "singleplayer_features" : {
            "description" : "Single-player features",
            "items" : {
              "$ref" : "#/components/schemas/Relation.Sparse"
            },
            "type" : "array"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the release on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          },
          "sound_systems" : {
            "description" : "Sound systems",
            "items" : {
              "$ref" : "#/components/schemas/Relation.Sparse"
            },
            "type" : "array"
          },
          "widescreen_support" : {
            "description" : "Widescreen support. `0` for no widescreen support, `1` for widescreen support",
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "ResourceType" : {
        "description" : "##ENTER##",
        "enum" : [
          "game",
          "franchise",
          "character",
          "concept",
          "object",
          "location",
          "person",
          "company",
          "video"
        ],
        "type" : "string"
      },
      "Response" : {
        "description" : "##ENTER##",
        "properties" : {
          "error" : {
            "description" : "A text string representing the status_code",
            "type" : "string"
          },
          "limit" : {
            "description" : "The value of the limit filter specified, or 100 if not specified",
            "type" : "integer"
          },
          "number_of_page_results" : {
            "description" : "The number of results on this page",
            "type" : "integer"
          },
          "number_of_total_results" : {
            "description" : "The number of total results matching the filter conditions specified",
            "type" : "integer"
          },
          "offset" : {
            "description" : "The value of the offset filter specified, or 0 if not specified",
            "type" : "integer"
          },
          "results" : {
            "description" : "Zero or more items that match the filters specified"
          },
          "status_code" : {
            "description" : "An integer indicating the result of the request. Acceptable values are:<br />1:OK<br />100:Invalid API Key<br />101:Object Not Found<br />102:Error in URL Format<br />103:'jsonp' format requires a 'json_callback' argument<br />104:Filter Error<br />105:Subscriber only video is for subscribers only",
            "type" : "integer"
          }
        },
        "type" : "object",
        "xml" : {
          "name" : "response",
          "wrapped" : true
        }
      },
      "Review" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Review.Sparse"
          },
          {
            "properties" : {
              "platforms" : {
                "description" : "Platforms the review appeared in.",
                "example" : "##WRONG TYPE##",
                "nullable" : true,
                "type" : "string"
              }
            }
          }
        ]
      },
      "Review.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the review detail resource.",
            "format" :"uri",
            "type" : "string"
          },
          "deck" : {
            "description" : "Brief summary of the review.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the review.",
            "type" : "string"
          },
          "dlc" : {
            "description" : "##ENTER##",
            "example" : "##WRONG TYPE##",
            "nullable" : true,
            "type" : "string"
          },
          "dlc_name" : {
            "description" : "Name of the Downloadable Content package.",
            "nullable" : true,
            "type" : "string"
          },
          "game" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation"
              },
              {
                "description" : "Game the review is for."
              }
            ]
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for review."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the review.",
            "type" : "string"
          },
          "publish_date" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the review was published on Giant Bomb."
              }
            ]
          },
          "release" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation.Sparse"
              },
              {
                "description" : "Game the review is for."
              }
            ]
          },
          "reviewer" : {
            "description" : "Name of the review's author.",
            "type" : "string"
          },
          "score" : {
            "description" : "The score given to the game on a scale of 1 to 5.",
            "maximum" : 5,
            "minimum" : 1,
            "type" : "integer"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the review on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "SaveTime" : {
        "description" : "##ENTER##",
        "properties" : {
          "message" : {
            "description" : "##ENTER##",
            "type" : "string"
          },
          "success" : {
            "description" : "##ENTER##",
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "Search" : {
        "allOf" : [
          {
            "oneOf" : [
              {
                "$ref" : "#/components/schemas/Game.Sparse"
              },
              {
                "$ref" : "#/components/schemas/Franchise.Sparse"
              },
              {
                "$ref" : "#/components/schemas/Character.Sparse"
              },
              {
                "$ref" : "#/components/schemas/Concept.Sparse"
              },
              {
                "$ref" : "#/components/schemas/Object.Sparse"
              },
              {
                "$ref" : "#/components/schemas/Location"
              },
              {
                "$ref" : "#/components/schemas/Person.Sparse"
              },
              {
                "$ref" : "#/components/schemas/Company.Sparse"
              },
              {
                "$ref" : "#/components/schemas/Video.Sparse"
              }
            ]
          },
          {
            "description" : "##ENTER##",
            "properties" : {
              "resource_type" : {
                "allOf" : [
                  {
                    "$ref" : "#/components/schemas/ResourceType"
                  },
                  {
                    "description" : "The type of resource the result is mapped to."
                  }
                ]
              }
            },
            "type" : "object"
          }
        ]
      },
      "Sort" : {
        "description" : "##ENTER##",
        "pattern" : "^\\w+:((asc)|(desc))$",
        "type" : "string"
      },
      "SubscriberOnly" : {
        "description" : "##ENTER##",
        "type" : "boolean"
      },
      "Theme" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the theme detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for theme."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the theme.",
            "type" : "integer"
          },
          "name" : {
            "description" : "Name of the theme.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the theme on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "TimeToSave" : {
        "description" : "##ENTER##",
        "type" : "integer"
      },
      "Type" : {
        "description" : "##ENTER##",
        "properties" : {
          "detail_resource_name" : {
            "description" : "The name of the type's detail resource.",
            "type" : "string"
          },
          "id" : {
            "description" : "Unique ID of the type.",
            "type" : "integer"
          },
          "list_resource_name" : {
            "description" : "The name of the type's list resource.",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Upcoming" : {
        "description" : "##ENTER##",
        "properties" : {
          "liveNow" : {
            "description" : "##ENTER##",
            "properties" : {
              "title" : {
                "description" : "##ENTER##",
                "type" : "string"
              },
              "image" : {
                "description" : "##ENTER##",
                "format" : "uri",
                "type" : "string"
              }
            },
            "type" : "object"
          },
          "upcoming" : {
            "description" : "##ENTER##",
            "items" :
            {
              "properties" : {
                "date" : {
                  "description" : "##ENTER##",
                  "example" : "##WRONG TYPE##",
                  "type" : "string"
                },
                "image" : {
                  "description" : "##ENTER##",
                  "format" : "uri",
                  "type" : "string"
                },
                "premium" : {
                  "description" : "##ENTER##",
                  "example" : false,
                  "type" : "boolean"
                },
                "title" : {
                  "description" : "##ENTER##",
                  "example" : "##WRONG TYPE##",
                  "type" : "string"
                },
                "type" : {
                  "description" : "##ENTER##",
                  "enum" : [
                    "Live Show"
                  ],
                  "type" : "string"
                }
              },
              "type" : "object"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "UserReview" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the user_review detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "date_added" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the user_review was added to Giant Bomb."
              }
            ]
          },
          "date_last_updated" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the user_review was last updated on Giant Bomb."
              }
            ]
          },
          "deck" : {
            "description" : "Brief summary of the user_review.",
            "type" : "string"
          },
          "description" : {
            "description" : "Description of the user_review.",
            "type" : "string"
          },
          "dlc" : {
            "description" : "DLC being reviewed.",
            "example" : "##WRONG TYPE##",
            "type" : "string"
          },
          "game" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation"
              },
              {
                "description" : "Game being reviewed."
              }
            ]
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for user_review."
              }
            ]
          },
          "id" : {
            "description" : "Unique ID of the user_review.",
            "type" : "integer"
          },
          "release" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Relation"
              },
              {
                "description" : "Release being reviewed."
              }
            ]
          },
          "reviewer" : {
            "description" : "Name of the review's author.",
            "type" : "string"
          },
          "score" : {
            "description" : "The score given to the game on a scale of 1 to 5.",
            "maximum" : 5,
            "minimum" : 1,
            "type" : "integer"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the user_review on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          },
          "wikiObject" : {
            "description" : "##ENTER##",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Video" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/Video.Sparse"
          },
          {
            "properties" : {
              "crew" : {
                "description" : "Crew of the video.",
                "type" : "string"
              },
              "hosts" : {
                "description" : "Hosts of the video.",
                "type" : "string"
              }
            }
          }
        ]
      },
      "Video.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the video detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "associations" : {
            "description" : "Related objects to the video.",
            "items" : {
              "$ref" : "#/components/schemas/Relation.GUID"
            },
            "type" : "array"
          },
          "deck" : {
            "description" : "Brief summary of the video.",
            "type" : "string"
          },
          "embed_player" : {
            "description" : "URL for video embed player. To be inserted into an iFrame.<br />You can add `?autoplay=true` to auto-play.<br />You can add `?time=x` where `x` is an integer between 0 and the length of the video in seconds to start the video at that point.<br />You can add `?vol=x` where `x` is a decimal between 0 and 1, .75 for example, to set the starting volume.<br />The above three parameters may be used together. Example: `?time=45&vol=.5&autoplay=true`<br />See `http://www.giantbomb.com/api/video-embed-sample/` for more information on using the embed player.",
            "format" : "uri",
            "type" : "string"
          },
          "guid" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/GUID"
              },
              {
                "description" : "For use in single item api call for video."
              }
            ]
          },
          "hd_url" : {
            "description" : "URL to the HD version of the video.",
            "format" : "uri",
            "type" : "string"
          },
          "high_url" : {
            "description" : "URL to the High Res version of the video.",
            "format" : "uri",
            "type" : "string"
          },
          "id" : {
            "description" : "Unique ID of the video.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the video."
              }
            ]
          },
          "length_seconds" : {
            "description" : "Length (in seconds) of the video.",
            "type" : "integer"
          },
          "low_url" : {
            "description" : "URL to the Low Res version of the video.",
            "format" : "uri",
            "nullable" : true,
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the video.",
            "type" : "string"
          },
          "premium" : {
            "description" : "Premium status of video.",
            "type" : "boolean"
          },
          "publish_date" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/DateTime"
              },
              {
                "description" : "Date the video was published on Giant Bomb."
              }
            ]
          },
          "saved_time" : {
            "description" : "The time where the user left off watching this video",
            "nullable" : true,
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the video on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          },
          "url" : {
            "description" : "The video's filename.",
            "type" : "string"
          },
          "user" : {
            "description" : "Author of the video.",
            "type" : "string"
          },
          "video_categories" : {
            "description" : "Video categories",
            "items" : {
              "$ref" : "#/components/schemas/Relation"
            },
            "type" : "array"
          },
          "video_show" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/VideoShow.Sparse"
              },
              {
                "description" : "Video show"
              }
            ]
          },
          "video_type" : {
            "description" : "Video category",
            "type" : "string"
          },
          "youtube_id" : {
            "description" : "Youtube ID for the video.",
            "nullable" : true,
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "VideoCategory" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the video_category detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "deck" : {
            "description" : "Brief summary of the video_category.",
            "type" : "string"
          },
          "id" : {
            "description" : "Unique ID of the video_category.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the video_category."
              }
            ]
          },
          "name" : {
            "description" : "Name of the video_category.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the video_category on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "VideoId" : {
        "description" : "##ENTER##",
        "type" : "integer"
      },
      "VideoShow" : {
        "allOf" : [
          {
            "$ref" : "#/components/schemas/VideoShow.Sparse"
          },
          {
            "description" : "##ENTER##",
            "properties" : {
              "active" : {
                "description" : "Is this show currently active",
                "type" : "boolean"
              },
              "api_videos_url" : {
                "description" : "Endpoint to retrieve the videos attached to this video_show.",
                "format" : "uri",
                "type" : "string"
              },
              "deck" : {
                "description" : "Brief summary of the video_show.",
                "type" : "string"
              },
              "display_nav" : {
                "description" : "Should this show be displayed in navigation menus",
                "type" : "boolean"
              },
              "guid" : {
                "allOf" : [
                  {
                    "$ref" : "#/components/schemas/GUID"
                  },
                  {
                    "description" : "For use in single item api call for video_show."
                  }
                ]
              },
              "latest" : {
                "description" : "The latest episode of a video show. Overrides other sorts when used as a sort field.",
                "items" : {
                  "$ref" : "#/components/schemas/Video"
                },
                "type" : "array"
              },
              "premium" : {
                "description" : "Premium status of video_show.",
                "type" : "boolean"
              }
            },
            "type" : "object"
          }
        ]
      },
      "VideoShow.Sparse" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the video_show detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "id" : {
            "description" : "Unique ID of the video_show.",
            "type" : "integer"
          },
          "image" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image.Tagged"
              },
              {
                "description" : "Main image of the video_show."
              }
            ]
          },
          "logo" : {
            "allOf" : [
              {
                "$ref" : "#/components/schemas/Image"
              },
              {
                "description" : "Show logo."
              }
            ]
          },
          "position" : {
            "description" : "Editor ordering.",
            "type" : "integer"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the video_show on Giant Bomb.",
            "format" : "uri",
            "type" : "string"
          },
          "title" : {
            "description" : "Title of the video_show.",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "VideoType" : {
        "description" : "##ENTER##",
        "properties" : {
          "api_detail_url" : {
            "description" : "URL pointing to the video_type detail resource.",
            "format" : "uri",
            "type" : "string"
          },
          "deck" : {
            "description" : "Brief summary of the video_type.",
            "type" : "string"
          },
          "id" : {
            "description" : "Unique ID of the video_type.",
            "type" : "integer"
          },
          "name" : {
            "description" : "Name of the video_type.",
            "type" : "string"
          },
          "site_detail_url" : {
            "description" : "URL pointing to the video_type on Giant Bomb.",
            "format" : "uri", 
            "type" : "string"
          }
        },
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "api_key" : {
        "in" : "query",
        "name" : "api_key",
        "type" : "apiKey"
      }
    }
  },
  "externalDocs" : {
    "description" : "##ENTER##",
    "url" : "https://www.giantbomb.com/api/documentation/"
  },
  "info" : {
    "description" : "##ENTER##",
    "title" : "Giant Bomb API",
    "version" : "0.7"
  },
  "openapi" : "3.0.2",
  "paths" : {
    "/api/accessories" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/accessories`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-3"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((date_added)|(date_last_updated)|(id)|(name)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the marked fields in the Fields section below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />\n**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((date_added)|(date_last_updated)|(id)|(name)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Accessory"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Accessory"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Accessory"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/accessory/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/accessory`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-2"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Accessory"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Accessory"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Accessory"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/characters" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/characters`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-5"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "birthday",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "first_appeared_in_game",
                      "gender",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "last_name",
                      "name",
                      "real_name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `birthday`\n- `date_added`\n- `date_last_updated`\n- `gender`\n- `id`\n- `name`\n- `real_name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((birthday)|(date_added)|(date_last_updated)|(gender)|(id)|(name)|(real_name)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `aliases`\n- `birthday`\n- `date_added`\n- `date_last_updated`\n- `gender`\n- `id`\n- `name`\n- `real_name`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((aliases)|(birthday)|(date_added)|(date_last_updated)|(gender)|(id)|(name)|(real_name)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Character.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Character.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Character.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/character/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/character`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-4"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "birthday",
                      "concepts",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "enemies",
                      "first_appeared_in_game",
                      "franchises",
                      "friends",
                      "games",
                      "gender",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "last_name",
                      "locations",
                      "name",
                      "objects",
                      "people",
                      "real_name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Character"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Character"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Character"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/chats" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/chats`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-7"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "channel_name",
                      "deck",
                      "guid",
                      "history",
                      "id",
                      "image",
                      "password",
                      "player",
                      "site_detail_url",
                      "title"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Chat"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Chat"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Chat"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Live"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/chat/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/chat`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-6"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "channel_name",
                      "deck",
                      "guid",
                      "id",
                      "image",
                      "password",
                      "site_detail_url",
                      "title"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Chat"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Chat"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Chat"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Live"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/companies" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/companies`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-9"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "abbreviation",
                      "aliases",
                      "api_detail_url",
                      "date_added",
                      "date_founded",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "location_address",
                      "location_city",
                      "location_country",
                      "location_state",
                      "name",
                      "phone",
                      "site_detail_url",
                      "website"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `abbreviation`\n- `date_added`\n- `date_founded`\n- `date_last_updated`\n- `id`\n- `location_city`\n- `location_country`\n- `location_state`\n- `name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((abbreviation)|(date_added)|(date_founded)|(date_last_updated)(id)|(location_city)|(location_country)|(location_state)|(name)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `abbreviation`\n- `date_added`\n- `date_founded`\n- `date_last_updated`\n- `id`\n- `location_city`\n- `location_country`\n- `location_state`\n- `name`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((abbreviation)|(date_added)|(date_founded)|(date_last_updated)(id)|(location_city)|(location_country)|(location_state)|(name)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Company.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Company.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Company.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/company/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/company`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-8"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "abbreviation",
                      "aliases",
                      "api_detail_url",
                      "characters",
                      "concepts",
                      "date_added",
                      "date_founded",
                      "date_last_updated",
                      "deck",
                      "description",
                      "developed_games",
                      "developer_releases",
                      "distributor_releases",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "location_address",
                      "location_city",
                      "location_country",
                      "location_state",
                      "locations",
                      "name",
                      "objects",
                      "people",
                      "phone",
                      "published_games",
                      "publisher_releases",
                      "site_detail_url",
                      "website"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Company"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Company"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Company"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/concepts" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/concepts`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-11"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "first_appeared_in_franchise",
                      "first_appeared_in_game",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((date_added)|(date_last_updated)|(id)|(name)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `aliases`\n- `date_added`\n- `date_last_updated`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((aliases)|(date_added)|(date_last_updated)|(id)|(name)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Concept.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Concept.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Concept.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/concept/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/concept`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-10"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "characters",
                      "concepts",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "first_appeared_in_franchise",
                      "first_appeared_in_game",
                      "franchises",
                      "games",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "locations",
                      "name",
                      "objects",
                      "people",
                      "related_concepts",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Concept"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Concept"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Concept"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/dlcs" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/dlcs`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-13"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "game",
                      "guid",
                      "id",
                      "image",
                      "name",
                      "platform",
                      "release_date",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "$ref" : "#/components/parameters/Platforms"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `id`\n- `name`\n- `platform`\n- `release_date`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((date_added)|(date_last_updated)|(id)|(name)|(platform)|(release_date)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `game`\n- `id`\n- `name`\n- `platform`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((date_added)|(date_last_updated)|(game)|(id)|(name)|(platform)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/DLC"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/DLC"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/DLC"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/dlc/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/dlc`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-12"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "game",
                      "guid",
                      "id",
                      "image",
                      "name",
                      "platform",
                      "release_date",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/DLC"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/DLC"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/DLC"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/franchises" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/franchises`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-15"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Franchise.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Franchise.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Franchise.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/franchise/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/franchise`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-14"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "characters",
                      "concepts",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "games",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "locations",
                      "name",
                      "objects",
                      "people",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Franchise"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Franchise"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Franchise"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/game_ratings" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/game_ratings`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-19"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "guid",
                      "id",
                      "image",
                      "name",
                      "rating_board"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `id`\n- `name`\n- `rating_board`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((id)|(name)|(rating_board)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `id`\n- `name`\n- `rating_board`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((id)|(name)|(rating_board)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/GameRating"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/GameRating"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/GameRating"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/game_rating/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/game_rating`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-18"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "guid",
                      "id",
                      "image",
                      "name",
                      "rating_board"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/GameRating"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/GameRating"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/GameRating"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/games" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/games`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-17"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "expected_release_day",
                      "expected_release_month",
                      "expected_release_quarter",
                      "expected_release_year",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "name",
                      "number_of_user_reviews",
                      "original_game_rating",
                      "original_release_date",
                      "platforms",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "$ref" : "#/components/parameters/Platforms"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `id`\n- `name`\n- `number_of_user_reviews`\n- `original_game_rating`\n- `original_release_date`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((date_added)|(date_last_updated)|(id)|(name)|(number_of_user_reviews)|(original_game_rating)|(original_release_date)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `aliases`\n- `date_added`\n- `date_last_updated`\n- `expected_release_month`\n- `expected_release_quarter`\n- `expected_release_year`\n- `id`\n- `name`\n- `number_of_user_reviews`\n- `original_release_date`\n- `platforms`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((aliases)|(date_added)|(date_last_updated)|(expected_release_month)|(expected_release_quarter)|(expected_release_year)|(id)|(name)|(number_of_user_reviews)|(original_release_date)|(platforms)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Game.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Game.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Game.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/game/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/game`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-16"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "characters",
                      "concepts",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "developers",
                      "dlcs",
                      "expected_release_day",
                      "expected_release_month",
                      "expected_release_quarter",
                      "expected_release_year",
                      "first_appearance_characters",
                      "first_appearance_concepts",
                      "first_appearance_locations",
                      "first_appearance_objects",
                      "first_appearance_people",
                      "franchises",
                      "genres",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "images",
                      "killed_characters",
                      "locations",
                      "name",
                      "number_of_user_reviews",
                      "objects",
                      "original_game_rating",
                      "original_release_date",
                      "people",
                      "platforms",
                      "publishers",
                      "releases",
                      "reviews",
                      "similar_games",
                      "site_detail_url",
                      "themes",
                      "videos"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Game"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Game"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Game"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/genres" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/genres`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-21"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Genre"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Genre"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Genre"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/genre/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/genre`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-20"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Genre"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Genre"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Genre"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/images/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/images`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-22"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "icon_url",
                      "image_tag",
                      "medium_url",
                      "original_url",
                      "screen_large_url",
                      "screen_url",
                      "small_url",
                      "super_url",
                      "thumb_url",
                      "tiny_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `image_tag`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((image_tag)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Image"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Image"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Image"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/locations" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/locations`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-24"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "first_appeared_in_game",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((date_added)|(date_last_updated)|(id)|(name)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `aliases`\n- `date_added`\n- `date_last_updated`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((aliases)|(date_added)|(date_last_updated)|(id)|(name)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Location"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Location"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Location"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/location/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/location`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-23"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "first_appeared_in_game",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Location"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Location"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Location"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/objects" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/objects`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-26"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "first_appeared_in_game",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((date_added)|(date_last_updated)|(id)|(name)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `aliases`\n- `date_added`\n- `date_last_updated`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((aliases)|(date_added)|(date_last_updated)|(id)|(name)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Object.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Object.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Object.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/object/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/object`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-25"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "characters",
                      "companies",
                      "concepts",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "first_appeared_in_game",
                      "franchises",
                      "games",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "locations",
                      "name",
                      "objects",
                      "people",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Object"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Object"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Object"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/people" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/people`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-28"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "birth_date",
                      "country",
                      "date_added",
                      "date_last_updated",
                      "death_date",
                      "deck",
                      "description",
                      "first_credited_game",
                      "gender",
                      "guid",
                      "hometown",
                      "id",
                      "image",
                      "image_tags",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `birth_date`\n- `country`\n- `date_added`\n- `date_last_updated`\n- `death_date`\n- `gender`\n- `hometown`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((birth_date)|(country)|(date_added)|(date_last_updated)|(death_date)|(gender)|(hometown)|(id)|(name)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `aliases`\n- `birth_date`\n- `country`\n- `date_added`\n- `date_last_updated`\n- `death_date`\n- `gender`\n- `hometown`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((aliases)|(birth_date)|(country)|(date_added)|(date_last_updated)|(death_date)|(gender)|(hometown)|(id)|(name)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Person.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Person.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Person.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/person/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/person`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-27"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "aliases",
                      "api_detail_url",
                      "birth_date",
                      "characters",
                      "concepts",
                      "country",
                      "date_added",
                      "date_last_updated",
                      "death_date",
                      "deck",
                      "description",
                      "first_credited_game",
                      "franchises",
                      "games",
                      "gender",
                      "guid",
                      "hometown",
                      "id",
                      "image",
                      "image_tags",
                      "locations",
                      "name",
                      "objects",
                      "people",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Person"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Person"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Person"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/platforms" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/platforms`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-30"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "abbreviation",
                      "api_detail_url",
                      "company",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "install_base",
                      "name",
                      "online_support",
                      "original_price",
                      "release_date",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `abbreviation`\n- `date_added`\n- `date_last_updated`\n- `id`\n- `install_base`\n- `name`\n- `online_support`\n- `original_price`\n- `release_date`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((abbreviation)|(date_added)|(date_last_updated)|(id)|(install_base)|(name)|(online_support)|(original_price)|(release_date)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `abbreviation`\n- `company`\n- `date_added`\n- `date_last_updated`\n- `id`\n- `install_base`\n- `name`\n- `online_support`\n- `original_price`\n- `release_date`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((abbreviation)|(company)|(date_added)|(date_last_updated)|(id)|(install_base)|(name)|(online_support)|(original_price)|(release_date)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Platform"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Platform"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Platform"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/platform/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/platform`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-29"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "abbreviation",
                      "api_detail_url",
                      "company",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "image_tags",
                      "install_base",
                      "name",
                      "online_support",
                      "original_price",
                      "release_date",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Platform"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Platform"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Platform"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/promos" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/promos`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-32"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "deck",
                      "guid",
                      "id",
                      "image",
                      "link",
                      "name",
                      "resource_type",
                      "user"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `date_added`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((date_added)|(id)|(name)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `date_added`\n- `id`\n- `name`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((date_added)|(id)|(name)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Promo"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Promo"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Promo"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "General"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/promo/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/promo`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-31"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "deck",
                      "guid",
                      "id",
                      "image",
                      "link",
                      "name",
                      "resource_type",
                      "user"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Promo"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Promo"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Promo"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "General"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/rating_boards" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/rating_boards`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-34"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `id`\n- `name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((id)|(name)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `id`\n- `name`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((id)|(name)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/RatingBoard.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/RatingBoard.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/RatingBoard.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/rating_board/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/rating_board`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-33"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "name",
                      "region",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/RatingBoard"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/RatingBoard"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/RatingBoard"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/regions" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/regions`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-36"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `id`\n- `name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((id)|(name)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `id`\n- `name`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((id)|(name)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Region.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Region.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Region.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/region/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/region`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-35"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "guid",
                      "id",
                      "image",
                      "name",
                      "rating_boards",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Region"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Region"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Region"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/releases" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/releases`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-38"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "expected_release_day",
                      "expected_release_month",
                      "expected_release_quarter",
                      "expected_release_year",
                      "game",
                      "game_rating",
                      "guid",
                      "id",
                      "image",
                      "maximum_players",
                      "minimum_players",
                      "multiplayer_features",
                      "name",
                      "platform",
                      "product_code_type",
                      "product_code_value",
                      "region",
                      "release_date",
                      "resolutions",
                      "singleplayer_features",
                      "site_detail_url",
                      "sound_systems",
                      "widescreen_support"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "$ref" : "#/components/parameters/Platforms"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `game`\n- `game_rating`\n- `id`\n- `name`\n- `platform`\n- `product_code_type`\n- `product_code_value`\n- `region`\n- `release_date`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((date_added)|(date_last_updated)|(game)|(game_rating)|(id)|(name)|(platform)|(product_code_type)|(product_code_value)|(region)|(release_date)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `expected_release_month`\n- `expected_release_quarter`\n- `expected_release_year`\n- `game`\n- `game_rating`\n- `id`\n- `name`\n- `platform`\n- `product_code_type`\n- `product_code_value`\n- `region`\n- `release_date`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((date_added)|(date_last_updated)|(expected_release_month)|(expected_release_quarter)|(expected_release_year)|(game)|(game_rating)|(id)|(name)|(platform)|(product_code_type)|(product_code_value)|(region)|(release_date)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Release.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Release.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Release.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/release/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/release`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-37"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "developers",
                      "expected_release_day",
                      "expected_release_month",
                      "expected_release_quarter",
                      "expected_release_year",
                      "game",
                      "game_rating",
                      "guid",
                      "id",
                      "image",
                      "maximum_players",
                      "minimum_players",
                      "multiplayer_features",
                      "name",
                      "platform",
                      "product_code_type",
                      "product_code_value",
                      "publishers",
                      "region",
                      "release_date",
                      "resolutions",
                      "singleplayer_features",
                      "site_detail_url",
                      "sound_systems",
                      "widescreen_support"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Release"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Release"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Release"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/reviews" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/reviews`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-40"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "deck",
                      "description",
                      "dlc_name",
                      "game",
                      "guid",
                      "id",
                      "publish_date",
                      "release",
                      "reviewer",
                      "score",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `publish_date`\n- `reviewer`\n- `score`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((publish_date)|(reviewer)|(score)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `game`\n- `publish_date`\n- `reviewer`\n- `score`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((game)|(publish_date)|(reviewer)|(score)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Review.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Review.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Review.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Reviews"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/review/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/review`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-39"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "deck",
                      "description",
                      "dlc_name",
                      "game",
                      "guid",
                      "id",
                      "platforms",
                      "publish_date",
                      "release",
                      "reviewer",
                      "score",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Review"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Review"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Review"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Reviews"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/search" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/search`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-41"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "abbreviation",
                      "aliases",
                      "api_detail_url",
                      "associations",
                      "birth_date",
                      "birthday",
                      "country",
                      "date_added",
                      "date_founded",
                      "date_last_updated",
                      "death_date",
                      "deck",
                      "description",
                      "embed_player",
                      "expected_release_day",
                      "expected_release_month",
                      "expected_release_quarter",
                      "expected_release_year",
                      "first_appeared_in_franchise",
                      "first_appeared_in_game",
                      "first_credited_game",
                      "gender",
                      "guid",
                      "hd_url",
                      "high_url",
                      "hometown",
                      "id",
                      "image",
                      "image_tags",
                      "last_name",
                      "length_seconds",
                      "location_address",
                      "location_city",
                      "location_country",
                      "location_state",
                      "low_url",
                      "name",
                      "number_of_user_reviews",
                      "original_game_rating",
                      "original_release_date",
                      "phone",
                      "platforms",
                      "premium",
                      "publish_date",
                      "real_name",
                      "resource_type",
                      "saved_time",
                      "site_detail_url",
                      "url",
                      "user",
                      "video_categories",
                      "video_show",
                      "video_type",
                      "website",
                      "youtube_id"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "The number of results to display per page. This value defaults to 10 and can not exceed this number.",
            "in" : "query",
            "name" : "limit",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Limit"
                },
                {
                  "description" : "The number of results to display per page. This value defaults to 10 and can not exceed this number.",
                  "maximum" : 10
                }
              ]
            }
          },
          {
            "$ref" : "#/components/parameters/Page"
          },
          {
            "$ref" : "#/components/parameters/Query"
          },
          {
            "$ref" : "#/components/parameters/Resources"
          },
          {
            "$ref" : "#/components/parameters/SubscriberOnly"
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Search"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Search"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Search"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Search"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/themes" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/theme`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-43"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "guid",
                      "id",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `id`\n- `name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((id)|(name)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `id`\n- `name`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((id)|(name)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Theme"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Theme"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Theme"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/theme/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/theme`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-42"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "guid",
                      "id",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Theme"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Theme"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Theme"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Wiki"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/types" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/types`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-44"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Type"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Type"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Type"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "General"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/user_reviews" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/user_reviews`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-46"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "dlc",
                      "game",
                      "guid",
                      "id",
                      "release",
                      "reviewer",
                      "score",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Game"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `reviewer`\n- `score`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((date_added)|(date_last_updated)|(reviewer)|(score)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `date_added`\n- `date_last_updated`\n- `game`\n- `reviewer`\n- `score`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((date_added)|(date_last_updated)|(game)|(reviewer)|(score)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/UserReview"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/UserReview"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/UserReview"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Reviews"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/user_review/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/user_review`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-45"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "date_added",
                      "date_last_updated",
                      "deck",
                      "description",
                      "dlc",
                      "game",
                      "guid",
                      "id",
                      "release",
                      "reviewer",
                      "score",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/UserReview"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/UserReview"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/UserReview"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Reviews"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/videos" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/videos`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-48"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "associations",
                      "deck",
                      "embed_player",
                      "guid",
                      "hd_url",
                      "high_url",
                      "id",
                      "image",
                      "length_seconds",
                      "low_url",
                      "name",
                      "premium",
                      "publish_date",
                      "saved_time",
                      "site_detail_url",
                      "url",
                      "user",
                      "video_categories",
                      "video_show",
                      "video_type",
                      "youtube_id"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `id`\n- `length_seconds`\n- `name`\n- `publish_date`\n- `user`\n- `video_categories`\n- `video_type`\n- `video_show`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((id)|(length_seconds)|(name)|(publish_date)|(user)|(video_categories)|(video_type)|(video_show)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "$ref" : "#/components/parameters/SubscriberOnly"
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `id`\n- `length_seconds`\n- `name`\n- `publish_date`\n- `user`\n- `video_categories`\n- `video_type`\n- `video_show`\n- `premium`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((id)|(length_seconds)|(name)|(publish_date)|(user)|(video_categories)|(video_type)|(video_show)|(premium)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Video.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Video.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/Video.Sparse"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Videos"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/video/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/video`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-47"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "associations",
                      "crew",
                      "deck",
                      "embed_player",
                      "guid",
                      "hd_url",
                      "high_url",
                      "hosts",
                      "id",
                      "image",
                      "length_seconds",
                      "low_url",
                      "name",
                      "premium",
                      "publish_date",
                      "saved_time",
                      "site_detail_url",
                      "url",
                      "user",
                      "video_categories",
                      "video_show",
                      "video_type",
                      "youtube_id"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Video"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Video"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/Video"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Videos"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/video/current-live" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/video/current-live`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-55"
        },
        "parameters" : [
          
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CurrentLive"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CurrentLive"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CurrentLive"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "Get the currently running live stream",
        "tags" : [
          "Live"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/video/get-all-saved-times" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/video/get-all-saved-times`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-58"
        },
        "parameters" : [
          
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAllSavedTime"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAllSavedTime"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAllSavedTime"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "Get all the video saved times for the user",
        "tags" : [
          "Bookmarks"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/video/get-saved-time" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/video/get-saved-time`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-56"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "$ref" : "#/components/parameters/VideoId"
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSavedTime"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSavedTime"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetSavedTime"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "Get the saved time of a video for the user",
        "tags" : [
          "Bookmarks"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/video/save-time" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/video/save-time`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-57"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "$ref" : "#/components/parameters/VideoId"
          },
          {
            "$ref" : "#/components/parameters/TimeToSave"
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SaveTime"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SaveTime"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SaveTime"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "Save the progress time of a video for this user",
        "tags" : [
          "Bookmarks"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/video_categories" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/video_categories`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-52"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "deck",
                      "id",
                      "image",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `id`\n- `name`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((id)|(name)):((asc)|(desc))$",
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/VideoCategory"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/VideoCategory"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/VideoCategory"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Videos"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/video_category/{id}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/video_category`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-51"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "deck",
                      "id",
                      "image",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "id",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/VideoCategory"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/VideoCategory"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/VideoCategory"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Videos"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/video_shows" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/video_shows`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-54"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "active",
                      "api_detail_url",
                      "api_videos_url",
                      "deck",
                      "display_nav",
                      "guid",
                      "id",
                      "image",
                      "latest",
                      "logo",
                      "position",
                      "premium",
                      "site_detail_url",
                      "title"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          },
          {
            "description" : "The result set can be sorted by the listed fields below.<br /><br />*Format*: `&sort=field:direction` where `direction` is either `asc` or `desc`.<br /><br />**Supported Fields**:\n- `id`\n- `title`\n- `position`\n- `latest`",
            "in" : "query",
            "name" : "sort",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Sort"
                },
                {
                  "pattern" : "^((id)|(title)|(position)|(latest)):((asc)|(desc))$",
                }
              ]
            }
          },
          {
            "description" : "The result can be filtered by the listed fields below.<br />\n- *Single filter*: `&filter=field:value`\n- *Multiple filters*: `&filter=field:value,field:value`\n- *Date filters*: `&filter=field:start value|end value` (using datetime format)<br /><br />**Supported Fields**:\n- `id`\n- `title`\n- `active`\n- `display_nav`\n- `premium`",
            "in" : "query",
            "name" : "filter",
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/Filter"
                },
                {
                  "pattern" : "^((((id)|(title)|(active)|(display_nav)|(premium)):(([\\w\\s]+)|(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\|\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}))),?)+$"
                }
              ]
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/VideoShow"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/VideoShow"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/VideoShow"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Videos"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/video_show/{guid}" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "externalDocs" : {
          "description" : "Official documentation for `/api/video_show`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-53"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "active",
                      "api_detail_url",
                      "api_videos_url",
                      "deck",
                      "display_nav",
                      "guid",
                      "id",
                      "image",
                      "latest",
                      "logo",
                      "position",
                      "premium",
                      "site_detail_url",
                      "title"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "guid",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/VideoShow"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/VideoShow"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/VideoShow"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "##ENTER##",
        "tags" : [
          "Videos"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/video_types" : {
      "description" : "##ENTER##",
      "get" : {
        "deprecated" : true,
        "description" : "##ENTER##<br />DEPRECATED: Please use the video_category or the video_show endpoint",
        "externalDocs" : {
          "description" : "Official documentation for `/api/video_types`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-50"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "deck",
                      "id",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "$ref" : "#/components/parameters/Limit"
          },
          {
            "$ref" : "#/components/parameters/Offset"
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/VideoType"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/VideoType"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "items" : {
                            "$ref" : "#/components/schemas/VideoType"
                          },
                          "type" : "array"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "Get a list of video types",
        "tags" : [
          "Videos"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/api/video_type/{id}" : {
      "description" : "##ENTER##",
      "get" : {
        "deprecated" : true,
        "description" : "##ENTER##<br />DEPRECATED: Please use the video_category or the video_show endpoint",
        "externalDocs" : {
          "description" : "Official documentation for `/api/video_type`",
          "url" : "https://www.giantbomb.com/api/documentation/#toc-0-49"
        },
        "parameters" : [
          {
            "$ref" : "#/components/parameters/Format"
          },
          {
            "description" : "List of field names to include in the response. Use this if you want to reduce the size of the response payload. This filter can accept multiple arguments, each delimited with a \",\"",
            "explode" : false,
            "in" : "query",
            "name" : "field_list",
            "required" : false,
            "schema" : {
              "allOf" : [
                {
                  "$ref" : "#/components/schemas/FieldList"
                },
                {
                  "items" : {
                    "enum" : [
                      "api_detail_url",
                      "deck",
                      "id",
                      "name",
                      "site_detail_url"
                    ],
                    "type" : "string"
                  }
                }
              ]
            },
            "style" : "form"
          },
          {
            "description" : "##ENTER##",
            "in" : "path",
            "name" : "id",
            "required" : true,
            "schema" : {
              "description" : "##ENTER##",
              "type" : "string"
            }
          }
        ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/VideoType"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/jsonp" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/VideoType"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              },
              "application/xml" : {
                "schema" : {
                  "allOf" : [
                    {
                      "$ref" : "#/components/schemas/Response"
                    },
                    {
                      "properties" : {
                        "results" : {
                          "$ref" : "#/components/schemas/VideoType"
                        },
                        "version" : {
                          "description" : "##ENTER##",
                          "example" : "1.0",
                          "type" : "string"
                        }
                      },
                      "type" : "object"
                    }
                  ],
                  "type" : "object"
                }
              }
            },
            "description" : "##ENTER##"
          },
          "401" : {
            "$ref" : "#/components/responses/InvalidAPIKey"
          }
        },
        "security" : [
          {
            "api_key" : [
              
            ]
          }
        ],
        "summary" : "Get a details of a video type",
        "tags" : [
          "Videos"
        ]
      },
      "summary" : "##ENTER##"
    },
    "/upcoming_json" : {
      "description" : "##ENTER##",
      "get" : {
        "description" : "##ENTER##",
        "responses": {
          "200": {
            "content" : {
              "application/json" : {
                "schema": {
                  "$ref": "#/components/schemas/Upcoming"
                }
              }
            },
            "description" : "##ENTER##"
          }
        },
        "summary" : "##ENTER##",
        "tags" : ["Live", "Undocumented"]
      },
      "summary" : "##ENTER##"
    }
  },
  "servers" : [
    {
      "description" : "##ENTER##",
      "url" : "http://www.giantbomb.com/"
    }
  ],
  "tags" : [
    {
      "description" : "##ENTER##",
      "name" : "General"
    },
    {
      "description" : "##ENTER##",
      "name" : "Wiki"
    },
    {
      "description" : "##ENTER##",
      "name" : "Search"
    },
    {
      "description" : "##ENTER##",
      "name" : "Reviews"
    },
    {
      "description" : "##ENTER##",
      "name" : "Videos"
    },
    {
      "description" : "##ENTER##",
      "name" : "Live"
    },
    {
      "description" : "##ENTER##",
      "name" : "Bookmarks"
    },
    {
      "description" : "##ENTER##",
      "name" : "Undocumented"
    }
  ]
}
